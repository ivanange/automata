(\(.+\)\*?)([\.\+])(\(?.+\)?\*?)|(\(?.+\)?\*?)([\.\+])(\(.+\)\*?)

\((.*)\)\*|(.*)\*

greedy: \((.+)\)(\*?)([\+\.]?)|(.+?)(\*?)([\+\.]?)
lazy: \((.+?)\)(\*?)([\+\.]?)|(.+?)(\*?)([\+\.]?)

new greedy: \((.+)\)(\*?)([\+\.]?)|([^\+\.\*\(\)]+)(\*?)([\+\.]?)
new lazy: \((.+?)\)(\*?)([\+\.]?)|([^\+\.\*\(\)]+)(\*?)([\+\.]?)

new lazy + : \((.+?)\)(\*?)(\+)|([^\+\*\(\)]+)(\*?)(\+)
\((.+?)\)(\*?)([\+]?)|([^\+\*\(\)]+)(\*?)([\+]?)

new lazy . : \((.+?)\)(\*?)(\.)|([^\.\*\(\)]+)(\*?)(\.)

new lazy symbol : \((.+)\)(\*?)|([^\+\.\*\(\)]+)(\*?)
\((.+?)\)(\*?)|([^\+\.\*\(\)]+)(\*?)

/////////////////////////////////////////////////////////////////////////
FINAL

new lazy symbol : \((.+)\)(\*?)|([^\+\.\*\(\)]+)(\*?)

new lazy + : (\(.+?\)\*?)\+|([^\+\*\(\)]+\*?)\+

new lazy . : (\(.+?\)\*?)\.|([^\.\*\(\)]+\*?)\.


b.b+(a+b)*.(b.b+a*).a.a*  

b.a.a+((b+a).a.a)

(a+b).(b.b+a*)
((a+b)*.c*)*

((b+a).a.a)

b.b+(a+b)*.(b.b+a*).a.a*.((b+a).a.a)


        let split: string[] | RegExpExecArray;
        if ((split = (/\((.*)\)/g).exec(regex)) && split[0].length == regex.length) {
            console.log(split, "()"); return this.parseRegex(split[1]);
        }
        else if ((split = (/(\(.+\)\*?)([\.\+])(\(?.+\)?\*?)|(\(?.+\)?\*?)([\.\+])(\(.+\)\*?)/g).exec(regex)) && split[0].length == regex.length) {
            console.log(split, "[.+]");
            return split[2] == "." ? this.thompsonConcatenate([this.parseRegex(split[1]), this.parseRegex(split[2])]) :
                this.thompsonUnite([this.parseRegex(split[1]), this.parseRegex(split[2])]);
        }
        else if ((split = regex.split("+")).length > 1 && !regex.endsWith(")*")) {
            console.log(split, "+"); return this.thompsonUnite(split.map((el: string) => this.parseRegex(el)));
        }
        else if ((split = regex.split(".")).length > 1 && !regex.endsWith(")*")) {
            console.log(split, "."); return this.thompsonConcatenate(split.map((el: string) => this.parseRegex(el)));
        }
        else if ((split = (/\((.*)\)\*|([^\+\.\*\(\)])\*/g).exec(regex)) && split[0].length == regex.length) {
            console.log(split, "()*"); return this.thomposnIterate(this.parseRegex(split[1]));
        }
        else return this.thompsonSymbol(regex);